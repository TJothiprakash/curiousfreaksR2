✅ 1. Basic Grouping
java
Copy
Edit
Map<K, List<T>> = stream.collect(groupingBy(classifier));
You already nailed this.

✅ 2. Custom Downstream Collector
java
Copy
Edit
groupingBy(key, downstream)
You already understand:

.groupingBy(Person::getCity, toList())

.groupingBy(Person::getCity, counting())

More advanced:

toSet()

mapping(...)

collectingAndThen(...)

summarizingInt(...)

reducing(...)

Example:

java
Copy
Edit
Map<String, Set<String>> = people.stream()
    .collect(groupingBy(Person::getCity,
                        mapping(Person::getName, toSet())));
➡️ Groups by city, and gets Set of names in each.

✅ 3. Nested Grouping
java
Copy
Edit
groupingBy(key1, groupingBy(key2, ...))
You're doing this well.

✅ 4. Change Map Type (e.g., use TreeMap, LinkedHashMap)
By default, groupingBy uses HashMap. Want predictable order?

java
Copy
Edit
Map<String, List<Person>> = people.stream()
    .collect(Collectors.groupingBy(
        Person::getCity,
        TreeMap::new,
        Collectors.toList()
    ));
✅ 5. Grouping with Aggregation / Summary
Examples:

Sum ages per city

java
Copy
Edit
Map<String, Integer> = people.stream()
    .collect(groupingBy(
        Person::getCity,
        summingInt(Person::getAge)
    ));
Average age per city

java
Copy
Edit
Map<String, Double> = people.stream()
    .collect(groupingBy(
        Person::getCity,
        averagingInt(Person::getAge)
    ));
✅ 6. Mapping in Grouping
Use mapping to transform the value before collecting.

java
Copy
Edit
Map<String, List<String>> = people.stream()
    .collect(groupingBy(
        Person::getCity,
        mapping(Person::getName, toList())
    ));
➡️ Group by city, collect names (not Person objects).

✅ 7. Grouping + Reducing
You can reduce values after grouping.

java
Copy
Edit
Map<String, Optional<Person>> = people.stream()
    .collect(groupingBy(
        Person::getCity,
        maxBy(Comparator.comparingInt(Person::getAge))
    ));
➡️ Get the oldest person in each city.

✅ 8. Grouping + CollectingAndThen
java
Copy
Edit
Map<String, Integer> = people.stream()
    .collect(groupingBy(
        Person::getCity,
        collectingAndThen(counting(), Long::intValue)
    ));
➡️ You can post-process the result of counting (or anything else).

✅ 9. Multi-level Nested Mapping
java
Copy
Edit
Map<String, Map<Integer, List<String>>> = people.stream()
    .collect(groupingBy(
        Person::getCity,
        groupingBy(
            Person::getAge,
            mapping(Person::getName, toList())
        )
    ));
➡️ City → Age → Names

✅ 10. FlatMap inside Grouping (manually)
Java Streams don't allow flatMapping inside groupingBy until Java 9+. For Java 8, you do this manually.

java
Copy
Edit
// For example, grouping all words by length even if multiple per person
Map<Integer, List<String>> = people.stream()
    .flatMap(p -> Arrays.stream(p.getName().split(" ")))
    .collect(groupingBy(String::length));
