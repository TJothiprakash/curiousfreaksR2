 Your Learning GitHub Sandbox:
Profile A (Main Repo Owner)

This is where your main project lives.

Treat it as the "main organization" or core maintainer.

Profile B (Contributor)

Fork the repo from Profile A.

Clone it locally and make meaningful changes on a feature branch.

Push the branch and raise a Pull Request (PR) back to Profile A’s repo.

From Profile A:

Review the PR (write comments, request changes, etc.)

Use GitHub’s merge, squash, or rebase and merge options to accept PRs.

Optionally, try resolving conflicts directly from GitHub UI or command line.

💪 Learn These While Practicing:
Creating and switching branches (git checkout -b)

Pulling upstream changes (git remote add upstream ...)

Syncing forked repo with upstream (git fetch upstream, git rebase)

Squashing commits

Merge conflicts and resolution

Writing good PR descriptions and commit messages

Using .gitignore, .gitattributes, and GitHub Actions if you want to level up




🔧 1. CI/CD (Free Tools for Mastery)
Tool	Purpose	Free Tier Highlights
GitHub Actions	CI/CD pipelines integrated with GitHub	✅ 2000 minutes/month (free tier) + Linux/macOS runners
GitLab CI	Full DevOps CI/CD platform	✅ 400 minutes/month, free private repos, great UI
CircleCI	CI/CD for cloud-native apps	✅ 30,000 credits/month (~1000 builds), Docker + caching
Render	Auto deploy from GitHub (like Heroku)	✅ Free web services (512MB RAM), automatic builds from GitHub
Railway	Instant deployments via GitHub	✅ 500 hours/month + GitHub deploy + logs & metrics
Fly.io	Full CI/CD + global deployment	✅ 3 VMs with 256MB RAM free

📌 Recommendation: Use GitHub Actions + Render or Railway to build a full CI/CD pipeline, auto-deploy to test environments, all free.

⚙️ 2. Concurrency, Server Load Testing, & High RPS Experiments
Tool / Platform	Use Case	Free Tier / Notes
K6 (Grafana)	Load testing tool (CLI + scripting)	✅ Free cloud tests & unlimited local tests
Locust	Python-based concurrent load testing	✅ Fully open-source, runs locally
Artillery	Node.js-based load test + chaos testing	✅ Free, easy to simulate 1M RPS locally or via distributed
wrk	Fast CLI load testing tool	✅ Free, written in C
Testkube	Kubernetes-native test runner	✅ Free, great for CI/CD load tests in k8s
Google Cloud Run	Deploy test APIs + autoscaling	✅ 2M requests/month free
AWS Lambda + API GW	Build scalable endpoints for RPS testing	✅ 1M req/month (Lambda), 1M/month (API Gateway)
Fly.io	Run apps close to users + test latency	✅ 3 machines free, perfect for concurrency testing

💡 Bonus: Free Infra Credits
Provider	Credits	Good For
GCP	₹22,000 ($300)	Cloud Run, Firebase, BigQuery
Azure	₹15,500 ($200)	App Service, VMs
Oracle Cloud	Always Free Tier	2 cores, 1GB RAM VM x 4
Render	Free tier	500h/month + 100 GB bandwidth
Railway	Free tier	Quick APIs, DBs, CI/CD




✅ What You Got Right:
Merge ➝ ✅ Merges with full history of the incoming branch

➕ Keeps all the commits and creates a special "merge commit".

Squash ➝ ✅ Combines all commits into one, merges to main

➖ Loses individual commit history from the feature branch, but good for a clean log.

🔄 What Needs Correction:
Rebase and Merge does not delete the incoming branch
➕ Instead, it re-applies each commit from the PR onto the base branch, as if they were made there directly.

💡 Better way to phrase it:
🔁 Rebase and Merge makes it look like all the commits from the feature branch were made directly on main, in order, without a merge commit.

🎯 Visual Summary
Assume main looks like:

css
Copy
Edit
main: A---B
Your PR branch has:

mathematica
Copy
Edit
feature:     C---D
✅ After Merge Commit:
less
Copy
Edit
main: A---B-------M
              /   \
         C---D     (M = merge commit)
✅ After Squash and Merge:
sql
Copy
Edit
main: A---B---S
             (S = one new squashed commit with all PR changes)
✅ After Rebase and Merge:
mathematica
Copy
Edit
main: A---B---C'---D'
             (rebased versions of C & D)
❗ No merge commit — the commits appear as if they were made on main.

📌 TL;DR:
Type	Keeps PR Commit History?	Adds Merge Commit?	Clean History?
Merge	✅ Yes	✅ Yes	❌ No
Squash and Merge	❌ No (squashes all)	❌ No	✅ Yes
Rebase and Merge	✅ Yes (linearized)	❌ No	✅ Yes