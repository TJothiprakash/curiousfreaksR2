package greedy;
/*Given an array, arr[] of rope lengths, connect all ropes into a single rope with the minimum total cost. The cost to connect two ropes is the sum of their lengths.

Examples:

Input: arr[] = [4, 3, 2, 6]
Output: 29
Explanation: We can connect the ropes in following ways.
1) First connect ropes of lengths 2 and 3. Which makes the array [4, 5, 6]. Cost of this operation 2 + 3 = 5.
2) Now connect ropes of lengths 4 and 5. Which makes the array [9, 6]. Cost of this operation 4 + 5 = 9.
3) Finally connect the two ropes and all ropes have connected. Cost of this operation 9 + 6 =15. Total cost is 5 + 9 + 15 = 29. This is the optimized cost for connecting ropes.
Other ways of connecting ropes would always have same or more cost. For example, if we connect 4 and 6 first (we get three rope of 3, 2 and 10), then connect 10 and 3 (we gettwo rope of 13 and 2). Finally we connect 13 and 2. Total cost in this way is 10 + 13 + 15 = 38.
Input: arr[] = [4, 2, 7, 6, 9]
Output: 62
Explanation: First, connect ropes 4 and 2, which makes the array [6, 7, 6, 9]. Cost of this operation 4 + 2 = 6.
Next, add ropes 6 and 6, which results in [12, 7, 9]. Cost of this operation 6 + 6 = 12.
Then, add 7 and 9, which makes the array [12,16]. Cost of this operation 7 + 9 = 16. And
finally, add these two which gives [28]. Hence, the total cost is 6 + 12 + 16 + 28 = 62.
Input: arr[] = [10]
Output: 0
Explanation: Since there is only one rope, no connections are needed, so the cost is 0.
Constraints:
1 ≤ arr.size() ≤ 105
1 ≤ arr[i] ≤ 106
Approach:
The problem is a typical greedy problem, and the optimal approach is to always connect the two smallest ropes first. By doing this, we minimize the cost at each step and ensure the smallest possible growth in the total cost.

To efficiently find and remove the two smallest ropes, we can use a min-heap (priority queue). The heap allows us to extract the two smallest elements in logarithmic time, which makes the solution efficient.

Steps:
Insert all ropes into a min-heap: This allows us to always access the two smallest ropes.
Extract the two smallest ropes from the heap, calculate their cost (which is the sum of their lengths), and add the result to the total cost.
Insert the new rope formed by connecting the two smallest ropes back into the heap.
Repeat until only one rope remains.
Pseudocode:
Create a min-heap and insert all rope lengths into it.
While the heap contains more than one rope:
Extract the two smallest ropes from the heap.
Calculate the cost of connecting them (sum of their lengths).
Add this cost to the total cost.
Insert the new rope (sum of the two smallest ropes) back into the heap.
Return the total cost.
P
*/
import java.util.PriorityQueue;

public class MinCostRopes {

    public static int minCost(int[] arr) {
        // If there's only one rope, no connection is needed.
        if (arr.length <= 1) {
            return 0;
        }

        // Create a min-heap (priority queue) from the rope lengths.
        PriorityQueue<Integer> pq = new PriorityQueue<>();

        // Add all the ropes into the priority queue (min-heap).
        for (int length : arr) {
            pq.offer(length);
        }

        int totalCost = 0;

        // While there is more than one rope in the heap
        while (pq.size() > 1) {
            // Extract the two smallest ropes
            int first = pq.poll();
            int second = pq.poll();

            // The cost to connect these two ropes
            int cost = first + second;
            totalCost += cost;

            // Insert the new rope (sum of the two smallest ropes) back into the heap
            pq.offer(cost);
        }

        // Return the total cost of connecting all ropes
        return totalCost;
    }

    public static void main(String[] args) {
        int[] arr1 = {4, 3, 2, 6};
        System.out.println(minCost(arr1));  // Output: 29

        int[] arr2 = {4, 2, 7, 6, 9};
        System.out.println(minCost(arr2));  // Output: 62

        int[] arr3 = {10};
        System.out.println(minCost(arr3));  // Output: 0
    }
}
