package recursion;

import java.util.Stack;

public class PowerofN {
    public static void main(String[] args) {
        int n = 2, x=4;
        // System.out.println(calculatePower(n));
        Stack<Integer> stack = new Stack<>();
        stack.push(3);
        stack.push(1);
        stack.push(4);
        stack.push(2);

        System.out.println("Original Stack: " + stack);

        sortStack(stack);

        System.out.println("Sorted Stack: " + stack);
    }
    private static int calculatePower(int n) {
        // Reverse the number
        int reverse = reverseNumber(n);

        // Calculate n raised to the power of its reverse
        // Assuming result fits within a 32-bit signed integer
        return (int) Math.pow(n, reverse);
    }

    private static int reverseNumber(int n) {
        int reverse = 0;
        while (n > 0) {
            reverse = reverse * 10 + (n % 10);
            n /= 10;
        }
        return reverse;
    }

    public static int power(int n, int x) {
        if (x == 0) {
            return 1;
        }
        return n * power(n, x - 1);
    }

    // sort a stack using reacursion
    public static void sortStack(Stack<Integer> stack) {
        // Base case: If the stack is empty, return
        if (stack.isEmpty()) {
            return;
        }

        // Step 1: Remove the top element
        int temp = stack.pop();

        // Step 2: Recursively sort the remaining stack
        sortStack(stack);

        // Step 3: Insert the removed element back in sorted order
        insertInSortedOrder(stack, temp);
    }

    private static void insertInSortedOrder(Stack<Integer> stack, int element) {
        // Base case: If the stack is empty or the top element is smaller than the current element
        if (stack.isEmpty() || stack.peek() <= element) {
            stack.push(element);
            return;
        }

        // Step 1: Remove the top element
        int temp = stack.pop();

        // Step 2: Recursively insert the current element
        insertInSortedOrder(stack, element);

        // Step 3: Put the removed element back
        stack.push(temp);
    }

    public static void reverseStack(Stack<Integer> stack) {
        // Base case: If the stack is empty, return
        if (stack.isEmpty()) {
            return;
        }

        // Step 1: Pop the top element
        int temp = stack.pop();

        // Step 2: Recursively reverse the rest of the stack
        reverseStack(stack);

        // Step 3: Insert the popped element at the bottom
        insertAtBottom(stack, temp);
    }

    private static void insertAtBottom(Stack<Integer> stack, int element) {
        // Base case: If the stack is empty, push the element
        if (stack.isEmpty()) {
            stack.push(element);
            return;
        }

        // Step 1: Pop the top element
        int temp = stack.pop();

        // Step 2: Recursively insert the element at the bottom
        insertAtBottom(stack, element);

        // Step 3: Push the removed element back on top
        stack.push(temp);
    }


}



