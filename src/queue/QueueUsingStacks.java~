package queue;

import java.util.Stack;

public class QueueUsingStacks<T> {
    private Stack<T> stack1 = new Stack<>(); // Stack for insert
    private Stack<T> stack2 = new Stack<>(); // Stack for remove

    // Insert an element into the queue
    public boolean insert(T item) {
        stack1.push(item);
        return true;
    }

    // Remove an element from the queue
    public T remove() throws Exception {
        if (stack2.isEmpty()) {
            if (stack1.isEmpty()) {
                throw new Exception("Queue is empty");
            }
            // Move all elements from stack1 to stack2
            while (!stack1.isEmpty()) {
                stack2.push(stack1.pop());
            }
        }
        return stack2.pop(); // Remove and return the front element
    }

    // Display the queue elements without losing data
    public void display() {
        if (stack1.isEmpty() && stack2.isEmpty()) {
            System.out.println("Queue is empty");
            return;
        }

        // Copy elements temporarily for display
        Stack<T> tempStack = new Stack<>();
        while (!stack2.isEmpty()) {
            tempStack.push(stack2.pop());
        }

        System.out.print("Front -> ");
        while (!tempStack.isEmpty()) {
            T element = tempStack.pop();
            System.out.print(element + " <- ");
            stack2.push(element); // Restore elements in stack2
        }

        Stack<T> reverseStack1 = new Stack<>();
        while (!stack1.isEmpty()) {
            reverseStack1.push(stack1.pop());
        }

        while (!reverseStack1.isEmpty()) {
            T element = reverseStack1.pop();
            System.out.print(element + " <- ");
            stack1.push(element); // Restore elements in stack1
        }
        System.out.println("END");
    }
}
